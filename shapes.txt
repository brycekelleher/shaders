float stroke(float sd)
{
    float width = 0.05;
    float smooth = 0.05;
    
    float d = abs(sd);
    return 1.0 - smoothstep(width, width + smooth, d);
}

float fill(float sd)
{
    float width = 0.0;
    float smooth = 0.0;
    
    float d = sd;
    //return 1.0 - smoothstep(width, width + smooth, d);
    return step(sd, 0.0);
}

float disc(vec2 P, float size)
{
    return length(P) - size;
}

float box(vec2 p, float size)
{
	p = abs(p) - size;
    return min(max(p.x, p.y), 0.0) + length(max(p, 0.0));
}

float diamond(vec2 p, float size)
{	
    float sqrt2 = sqrt(2.0);
    size = size * (1.0 / sqrt2);
    
    vec2 q;
    q.x = (1.0 / sqrt2) * (p.x + p.y);
    q.y = (1.0 / sqrt2) * (p.y - p.x);
    
    return box(q, size);
}

float ring(vec2 p, float size)
{
    float d1 = disc(p, size);
    float d2 = disc(p, size / 2.0);
    
    return max(d1, -d2);
}

float check(vec2 p, float size)
{
    size = size * 0.5;
    
    float d1 = box(p - vec2( 1.0,  1.0) * size, size);
    float d2 = box(p - vec2(-1.0, -1.0) * size, size);
    
    return min(d1, d2);
}

float heart(vec2 p, float size)
{
	float d1 = disc(vec2(p.x - 0.5, p.y), size);
    float d2 = disc(vec2(p.x + 0.5, p.y), size);
    float d3 = diamond(vec2(p.x, p.y - 0.5), size);
    
    return min(min(d1, d2), d3);
}

float box2(vec2 p, float size)
{
    float sd1 = box(vec2(p.x - (size / 4.0), p.y - (size / 4.0)), size);
    float sd2 = box(vec2(p.x + (size / 4.0), p.y + (size / 4.0)), size);
	float sd3 = disc(vec2(p.x + (size / 4.0), p.y + (size / 4.0)), size);
    
    return max(sd1, -sd3);
}
    
float chevron(vec2 P, float size)
{
    float x = 1.0/1.414 * (P.x - P.y);
    float y = 1.0/1.414 * (P.x + P.y);
    float r1 = max(abs(x), abs(y)) - size/3.0;
    float r2 = max(abs(x-size/3.0), abs(y-size/3.0)) - size/3.0;
    return max(r1,-r2);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 uv = fragCoord.xy / iResolution.xy;
    // apply aspect ratio
    uv.x *= 1.75;
    //uv.x = uv.x + 0.2 * iGlobalTime;
    
    vec3 backcolor = vec3(0.0, 0.0, 0.0);
    vec3 shapecolor = vec3(1.0, 1.0, 1.0);

    uv.x = fract(uv.x * 5.0);
    uv.y = fract(uv.y * 5.0);

    // scale and bias to -1 to 1
    uv = 1.0 - 2.0 * uv;
    
    // calculate signed distance
    float d = heart(uv, 0.5);
    
    // stroke the shape
    float blend = fill(d);
    
    vec3 color = mix(backcolor, shapecolor, blend);
    
    // final color
    fragColor = vec4(color, 1.0);
}
