float saturate(float v) { return clamp(v, 0.0, 1.0); }
vec3 pow_vec3(vec3 v, float p) { return vec3(pow(v.x, p), pow(v.y, p), pow(v.z, p)); }

const float gamma = 2.2;

vec3 ToLinear(vec3 v) { return pow_vec3(v,     gamma); }
vec3 ToSRGB(vec3 v)   { return pow_vec3(v, 1.0/gamma); }

// Schlick's approximation
float CalculateFresnel(vec3 v, vec3 h)
{
    float f0 = 0.33;	// assumes air on one interface
    float base = 1.0 - dot(v, h);
    float exponential = pow( base, 5.0);
    float fresnel = f0 + (1.0 - f0) * exponential;
    
    return fresnel;
}

vec3 CalculateLighting(vec3 pos, vec3 normal, vec3 view)
{
    vec3 cd		= ToLinear(vec3(1.5, 0.0015, 0.0));
    vec3 cs		= ToLinear(vec3(0.8, 0.8, 0.8));
 	vec3 n		= normalize(normal);
    vec3 l 		= normalize(vec3(1, 1, 1));
    vec3 v		= normalize(view);
	vec3 h		= (l + n) / 2.0;
    
    // diffuse component
    float ndotl = dot(n, l);
    float diff	= saturate(ndotl) * (1.0 / 3.14152);
    
    // specular component
    float p = 8.0;
    float ndoth = dot(normal, h);
    float spec	= saturate(pow(ndoth, p)) * ((p + 2.0) / 8.0);
    float fresnel = CalculateFresnel(v, h);
        
    vec3 color = (cd * diff) + (cs * fresnel * spec);
    
    color = ToSRGB(color);
    //return vec3(0.5 + 0.5 * v);
    return vec3(color);
}

